Make your own Button Row & dropDownButton
general:
 - To fix
	* use WorkerScript to provide threading in lineInfo, settings, realtimeSchedule,  mainPage (route - loading done, stopInfo - done)
 - To implement
	* popup menu on search button press and hold: clear
	* on stopInfo and lineInfo make selected button wider that the others
	* pinch anction on map

lineInfo:
 - To fix
 - To implement
	* when moving to stop info pass the line number to highlight
	* save schedule to database
	* check for schedule in DB. show saved schedule
	* add confirmation on delete all lines action
	* add checkboxes to multiselectiong dialog lines
	* show midpoint passes when possible for schedule

stopInfo:
 - To fix
	* make stopSearch use Stops API instead of geochace - more stops are found: search is done in address field also, but no transport type info
	* when stop is selected from list: error shown on console about Schedule buttong icon
 - To implement
	* realtime schedule button can be implemented via pop-up menu on schedule button
	* if moved from line info - highlight retrieved line number
	* add confirmation on delete all stops action
	* save schedule in DB
	* merge same stops, show all line types in drop down or so
	* save full schedule for a stop if stop is favorite
	* split depart schedule to hours
	* a lot of stops (mostly VR) has same names: consider to add "nickname" for stop to be used, available for editing by user

settings:
 - To fix
 - To implement
	* GPS update interval is 10, let people choose it
	* show\hide lines passing info on stop info popup

realtime:
 - To fix
	* put it somewhere in app, currently no access from tabs version
	* schedule countdown timer visualize
	* when moving to stopInfo search - push also search flag to open search dialog
 - To implement
	* add context menu to propose show selected stop on map
	* add busy indicator while loading stop schedule

route
 - To fix
 - To implement
	* use landmarks from Location API on route page
	* when loading line from stopInfo - load also line stops from network
	* onPressAndHold GPS button - show timeout selection dialog
	* popup lines passing list

Done:
2012 05 14
* reset on startup
* update on startup check/update
* nickName support for stops: declaration, no implementation yet
* scale map objects according to zoom level
* stopInfo: if only one stop has been found - open it
* add possibility to search online even when offline data found
* after search fill data in search result model so main model is untouched and can be shown again. Allow switch between models
* finish stops and line name show
* when stop is selected eneque button "show stop info", or double-tap to go to info

2011 12 15
* version increase
* general: split all data into favorites and just DB
* finish geocoding api response push to searchResult model
* stopInfo: if stop is saved but no time schedule returned - show rest of the data
* stopInfo: go to lineInfo with double click
* stopInfo: if searchResult are shown and delete all requested : delete only filtered stops
* stopInfo: finish with buttonClicked(): setCurrent has been removed. Need to check stop in model in case if stopIdLong was requested and it's already saved
* stopInfo: implement states for stopInfo page
* stopInfo: use tabs is not possible: no way to manipulate part of page, only whole page; use states to minimize code lines
* lineInfo: use tabs is not possible: no way to manipulate part of page, only whole page; use states to minimize code lines
* general: add db init on first run
* stopInfo: exact/not exact search
* lineinfo: on stops tab if stop selected - show on map (if showMapButton triggered)
* general: fix models names and views names
* route: show only 1 line by default
* settings: remove networking config support

2011 11 18
* refactored almost everything
* tabs interface
* map shows all stops from lineInfo page
* stops are added sequentially rather than beign substituted

2011 10 20
* route: check where threading can be enabled more (i.e. surrounding stops and all passing routes load)
* settings: add networking mode variants:
 - full offline
 - full online
 - info offline\schedule online
* stopInfo: fix showLine map action in context
* stopInfo: when moving to line map from schedule delegate don't check line offline availability, just move to map with line ID, map will check or fetch line data
* stopInfo: move all data fetch to workerScripts
* stopInfo: make sure after search lines\stops list has currentIndex of new stop, it will be used in route/map page: after moving index show line info
* lineInfo: fix stop name fetch: use from 1st model fill. now works only after moving to other page
* lineInfo: fetch schedule in working script
* realtime: move all buttons lower, leave all headline for stop name
* realtime: refresh request after lines amount has been changed 
* lineInfo: fix schedule parsing
* realtime: change buttons to tumblerbuttons
* settings: apply changes to all pages in stack
* settings: fix themes selection/set
* lineInfo: fill lineInfoModel in workerscript
* route:    show nearby stops
* show nearest available stops based on GPS data
* check if nearby stop is already on the map

2011 09 27
* lineInfo: add settings "group same line with diff directions"
* toolbar: hide search tool when on main page
* toolbar: search button gives search to current page. fix
* realtime: add possibility to manage lines count
* realtime: after new stop search refresh the stops list
* lineInfo: after lookup of stop ID from line stops list - update stops list
* lineInfo: stop reach : auto fetch name

2011 09 25
* ADD FUCKING PROGRESS INDICATOR. 16 lines parsing takes too long
* consider not push to DB all found stops\lines but only which user marks as favourit
* worker script for route loads lineshape much faster
* improve speed of line shape creation
* move config object to separate qml file
* merge same line in one, show both directions in drop down or so

2011 09 20
* start to support networking variants, several fixes
* add spinner while searching for data in stopInfo
* scroll down and highlight items just saved from search
* search result show in another model for query dialog like themes in config page
* more info in dataRect, split direction info From: To:
* parsing of 54 lines ("Tapiola" request) takes too long. Need to make a dialog ["Got too many lines.
      Save all? (will take ~1 minute) or mark lines to save?"] or just page for selecting
* add banner show "building line shape" while loading map

2011 09 19
* stopInfo cosmetic changes: button rows wider, +1 button, Info alignment : left, width: fixed
* add passing lines list
* saved lines show in lineInfoModel
* make sure deleteStop\deleteLine deletes also data from other tables
* deletions of saved lines
* rename fields in lineInfoModel to correspond to DB field names

2011 09 16
* find tool on toolbar (small redesign), remove search button from header
* put stop info in DB
* load info from database when loading saved stop
* stop pushing stop coords to the map, push stop ID only
* make sure offline mode has everything needed in DB
* fixed focus clear in lineInfo to hide keyboard
* fix dataRect visibility after new search when dataRect already visible or don't clean list & grid before new data is recieved
* stop pushing stopIdLong to DB, push directly to page : pushStopId()

2011 09 15
* parse stops from dox.responseXML : switch to DB SELECT
* parse lines description, map     : add stops INSERT INTO DB
* xml http request : switch to use local var instead of JS.doc
* xml http request : schedule reittiopas page  : take from DB instead of JS.doc
* remove JS.currentSchedule from scheduleShow()
* make sure offline mode loads all needed info for lineInfo (limit responseXML usage, remove it)
* when searching line from stopInfo -> check DB first


